第一次代码，磕磕碰碰的，好几种边界情况没考虑进去导致过几次错误。比如遇10进1，比如只有一次算法不进位，比如只有一次算法进位，还有只有0和0的情况。
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """ 
        c = -1
        d = 0
        
        if l1:
            c = l1.val
            
        if l2:
            c += l2.val
            
        if  l1 or l2 or c!=-1 or c>9:
            if c>9:
                c -= 10
                d += 1
            r = ListNode(c)
            rn = r
        while (l1.next or l2.next or d!=0):
            c = d
            d = 0
            if l1.next:
                l1 = l1.next    
                c += l1.val
            if l2.next:
                l2 = l2.next
                c += l2.val
            if c>9:
                c -= 10
                d += 1
            rn.next = ListNode(c)
            rn = rn.next
        return(r)
耗时84ms
第二次修改:可以预先多创立一位c0,就不用把起始位置情况考虑，但记住最后回返位置是c0.next。另判断d！=0 直接判断d就够，不等于0的数为真，0为假。
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """ 
        d = 0
        r = ListNode(0)
        rn = r
        while (l1 or l2 or d):
            s = (l1.val if l1 else 0)+(l2.val if l2 else 0) + d
            rn.next = ListNode(s % 10)
            d = s/10
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next
            rn = rn.next
        return(r.next)
